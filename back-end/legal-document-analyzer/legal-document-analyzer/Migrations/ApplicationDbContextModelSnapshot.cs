// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using legal_document_analyzer.Infrastructure;

#nullable disable

namespace legal_document_analyzer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChatSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("chatsessionid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("InputMode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inputmode");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ChatSessionId");

                    b.ToTable("chatmessages", (string)null);
                });

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("chatsessions", (string)null);
                });

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.Clause", b =>
                {
                    b.Property<Guid>("ClauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("clauseid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("documentid");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("explanation");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("ClauseId");

                    b.HasIndex("DocumentId");

                    b.ToTable("clauses", (string)null);
                });

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.DocumentSummary", b =>
                {
                    b.Property<Guid>("DocumentSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("documentsummaryid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("documentid");

                    b.Property<int>("Style")
                        .HasColumnType("integer")
                        .HasColumnName("style");

                    b.HasKey("DocumentSummaryId");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("documentsummaries", (string)null);
                });

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.LegalDocument", b =>
                {
                    b.Property<Guid>("LegalDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("legaldocumentid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploadedat");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("LegalDocumentId");

                    b.ToTable("legaldocuments", (string)null);
                });

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text")
                        .HasColumnName("passwordsalt");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refreshtoken");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("legal_document_analyzer.Domain.Entities.ChatSession", "ChatSession")
                        .WithMany("Messages")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatSession");
                });

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.Clause", b =>
                {
                    b.HasOne("legal_document_analyzer.Domain.Entities.LegalDocument", null)
                        .WithMany("Clauses")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.DocumentSummary", b =>
                {
                    b.HasOne("legal_document_analyzer.Domain.Entities.LegalDocument", null)
                        .WithOne("Summary")
                        .HasForeignKey("legal_document_analyzer.Domain.Entities.DocumentSummary", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("legal_document_analyzer.Domain.Entities.LegalDocument", b =>
                {
                    b.Navigation("Clauses");

                    b.Navigation("Summary")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
